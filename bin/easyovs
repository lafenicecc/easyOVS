#!/usr/bin/python

__author__ = 'baohua'

import os
from oslo_config import cfg
import sys
import time

from easyovs import config
from easyovs.cli import CLI
from easyovs.common import CMDS_ONE, CMDS_BR, CMDS_OTHER
from easyovs.log import info, debug, error, LEVELS, lg
from easyovs.util import cleanup


# Fix setuptools' evil madness, and open up (more?) security holes
if 'PYTHONPATH' in os.environ:
    sys.path = os.environ['PYTHONPATH'].split(':') + sys.path

class Platform(object):
    """
    Build, setup, and run the platform.
    """
    def __init__(self):
        self.options = None
        self.args = None  # May be used someday for more CLI scripts

        self.parse_args()
        self.setup()
        self.begin()

    def parse_args(self):
        config.init(sys.argv[1:])

    def setup(self):
        """
        Setup and validate environment.
        """
        # set logging verbosity
        if LEVELS[cfg.CONF.verbosity] > LEVELS['output']:
            print ('*** WARNING: selected verbosity level (%s) will '
                   ' hide CLI output!\n'
                   'Please restart with -v [debug, info, output].'
                   % cfg.CONF.verbosity)
        lg.set_log_level(cfg.CONF.verbosity)
        info("Set log level to %s\n" % cfg.CONF.verbosity)

    def begin(self):
        if cfg.CONF.clean:
            info("Cleaning environment\n")
            cleanup()
            exit()

        start = time.time()
        cmd = cfg.CONF.cmd
        info("Run direct cmd = %s\n" % cmd)
        cmd_split = cmd.split()
        if len(cmd_split) == 1 and cmd == 'cli':
            CLI()
        elif cmd_split[0] in CMDS_ONE + CMDS_BR + CMDS_OTHER:
            CLI(foreground=False).run(cmd, cfg.CONF.forced)
        else:
            error('Unknown command, cmd=%s\n' % cmd)
        elapsed = float(time.time() - start)
        info('\n### Completed in %0.3f seconds ###\n' % elapsed)


if __name__ == "__main__":
    try:
        Platform()
    except KeyboardInterrupt:
        info("\n\nKeyboard Interrupt. "
             "Shutting down and cleaning up...\n\n")
        cleanup()
    except Exception:
        # Print exception
        type_, val_, trace_ = sys.exc_info()
        errorMsg = ("-" * 80 + "\n" +
                    "Caught exception. Cleaning up...\n\n" +
                    "%s: %s\n" % (type_.__name__, val_) +
                    "-" * 80 + "\n")
        error(errorMsg)
        # Print stack trace to debug log
        import traceback

        stackTrace = traceback.format_exc()
        debug(stackTrace + "\n")
        cleanup()